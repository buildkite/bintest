// Code generated by go-bindata.
// sources:
// data/client.go
// DO NOT EDIT!

package binproxy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataClientGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x95\x41\x8f\xdb\x36\x10\x85\xcf\xe4\xaf\x60\x05\x6c\x41\x15\xac\x84\xa2\x45\x51\x38\xd8\x43\xb2\x36\x82\xf4\x90\x2c\xd6\x05\x72\x08\x82\x40\x96\x46\x32\x5b\x9b\xd4\x0e\x29\x2b\x46\xe0\xff\x5e\x0c\x29\xd9\xf2\xda\x4d\x7d\xd9\x15\x39\xe4\xe3\xfb\xf8\xe4\x51\x5b\x94\xff\x14\x0d\x88\x6d\xa1\x0d\xe7\x7a\xdb\x5a\xf4\x42\x72\x96\xac\xf6\x1e\x5c\xc2\x59\x02\xa6\xb4\x95\x36\x4d\xfe\xb7\xb3\x86\x26\xea\xad\xa7\x7f\xda\xd2\x5f\x03\x3e\x5f\x7b\xdf\xd2\xb3\x0d\xeb\xdd\xde\x94\x09\x4f\x39\xdf\x15\x48\x4a\x0e\x70\x07\x28\x9c\x47\x6d\x1a\x9a\xf7\xfb\x16\x04\xc2\x73\x07\xce\xd3\x74\x57\x7a\xf1\x8d\xb3\xd7\xd8\x38\xf1\xe9\xf3\xb0\x8e\x2d\xcc\x4e\x9c\x86\x87\xe3\x36\xd7\x5a\xe3\x60\xb2\xef\xdd\x5c\x68\xe3\x7f\xff\x8d\xd6\xd4\x9d\x29\x03\x8a\x4c\xa9\xd4\x89\xd9\xbd\xa8\xb7\x3e\x5b\xb6\xa8\x8d\xaf\x65\x42\x56\x67\x79\x7e\xe7\xf2\x44\x89\xe8\x2c\xe5\x9c\x91\xac\x12\x80\x48\x1b\x88\xf3\xd1\x3a\x2f\x3b\x35\xda\xfc\xc6\x59\xf0\x37\x13\xd6\x65\xf4\xf0\xe9\x97\xd9\x67\xc5\x19\xb9\x9c\x09\x9a\x5c\x98\x9d\x46\x6b\x64\xaa\x38\x3b\x90\xa4\xae\x83\xde\x0f\xf7\xc2\xe8\x0d\x99\x61\x6d\x61\x74\x29\x01\x31\xe5\xec\xc0\x39\xa3\xfb\xe9\x1b\x41\xf7\x95\x7d\x2c\xb4\x7f\x8b\xb6\x6b\x39\xeb\x9b\xec\x75\x55\xc9\x5f\x49\x24\xcf\xc5\xba\x30\xd5\x86\x78\x2b\x6d\x38\x6b\xac\x20\xc6\x88\xc7\x2a\xa8\x81\x34\xb2\xb9\x35\x20\x53\xce\x18\x2a\xd1\x13\x83\xb6\xd9\xa3\x6e\x69\x8e\xb3\x17\x9b\xd8\x17\x25\x4a\xdb\xee\x17\x91\x56\xdb\xec\xc1\xb6\x7b\xd9\x2b\xc2\x58\xd2\x31\x24\x44\xfe\xc7\x55\x13\x06\xc6\xfa\xec\x61\x63\x1d\x7c\xd4\x7e\xbd\x40\xb4\x38\x00\x31\x76\xe0\xa7\x6a\xf0\x72\x88\xa7\x07\xe7\x4f\xf0\xac\x22\xc3\x70\x2c\x05\x91\xbd\x87\xfe\x29\x5e\xb0\x4c\x1e\x3f\x2c\xff\x4a\xd4\x79\x5a\x77\xee\xae\xca\xc3\xae\x44\x89\x90\x86\x6b\xb3\x77\xf3\x54\x89\x70\xa4\xae\x4f\x92\x53\x8f\xf1\xa2\xc7\x52\xb0\x42\x46\xbe\xc4\x84\x87\xb3\xe7\x50\x17\xdd\xc6\x3f\x6c\x34\x18\x9f\xcd\xad\x1c\x7d\x0e\xca\x70\x55\x14\x46\xbd\x81\xee\x2c\x20\xdb\xf9\x97\x09\xc5\x59\x35\x54\xa7\xec\x6f\xc1\xcb\xab\xb0\xb6\xf3\xe7\xb4\x27\xd4\x41\xe2\x2a\x6b\xac\x1d\x61\x5f\x64\x3e\xa6\x1c\x23\x9e\x58\xca\xde\xd8\x6a\x1f\xf2\x9b\x8c\x27\x21\xb2\xe9\xdb\x45\xcc\xd7\xc0\x01\xf1\x0a\x38\x20\xaa\xa1\x7a\x13\x38\x20\xfe\x17\xf8\x20\x71\x15\x3c\xd6\x6e\x03\x9f\x58\x3a\x03\x1f\xc7\x37\x80\xf7\x4d\xf8\xb1\x86\x67\xf8\xaa\xfd\x83\xad\xe0\x69\xda\x3e\xbe\x03\x49\xeb\x4b\x5b\xc1\x05\xe6\x6d\xcd\x62\x3c\x8e\xfa\xdd\x71\x4f\xec\x57\xf4\x53\x9a\x03\x69\xa3\x9c\xba\x8a\x94\x59\x2c\xc9\x1f\xc7\x52\xfa\xea\xff\xce\xa3\x96\xf6\x55\xfb\xa3\x58\x7a\x6c\xaf\xa7\xf6\x38\xf4\xf4\xd0\x25\xc7\x4e\x99\x0a\xf9\xd3\xd8\xa4\xc3\x95\x58\x0c\x49\xac\x6c\xb5\xa7\xdb\x31\xd0\xcb\xf0\x69\xc9\xde\x74\x75\x4d\xdd\x77\x04\x99\x9d\x48\x16\x26\x92\xac\x82\xf9\x38\x92\x08\xcf\x97\xb6\x11\x7c\x87\x86\x86\xe1\xb0\xe8\x3d\xcf\x05\x19\x14\x85\xf8\x73\xf9\xe1\xbd\xa8\x6c\xd9\x6d\x81\xae\x0c\x2f\x72\x1a\xfb\x7c\x52\xb4\xed\x46\x97\x85\xd7\xd6\x84\x0f\xdd\x2b\x51\xae\x0b\x74\xe0\xef\x3b\x5f\xff\xfc\x47\xa2\xc4\x2a\xbe\x2f\x97\x51\x5d\xf1\x30\x74\x66\x1c\x13\x38\xbe\x57\xc1\xdc\x13\x94\xa0\x77\x20\xfc\x1a\x82\xaa\x28\x5c\x70\x1a\x53\xae\x42\x56\xd5\xf1\x53\xf7\x9d\xa4\xf1\x32\xe1\x61\xf7\x8d\x37\x35\x4c\x8e\xbb\x14\x95\xf9\x81\xff\x1b\x00\x00\xff\xff\xe5\xb3\x51\xff\x15\x08\x00\x00")

func dataClientGoBytes() ([]byte, error) {
	return bindataRead(
		_dataClientGo,
		"data/client.go",
	)
}

func dataClientGo() (*asset, error) {
	bytes, err := dataClientGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/client.go", size: 2069, mode: os.FileMode(420), modTime: time.Unix(1505130375, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/client.go": dataClientGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"client.go": &bintree{dataClientGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

