// Code generated by go-bindata.
// sources:
// data/client.go
// DO NOT EDIT!

package binproxy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataClientGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x51\x8b\xe3\x36\x10\x7e\x96\x7e\x85\x6a\xd8\x22\x17\xd7\xa6\xb4\x94\x92\x63\x1f\xee\x92\x70\x5c\x1f\xee\x96\xa4\x70\x0f\xcb\x52\x1c\x7b\xec\xa8\x4d\x24\xef\x48\x8e\x37\x2c\xf9\xef\x65\x24\xdb\x49\x9a\xb0\x0d\xe5\x5e\x12\x6b\xa4\x99\xf9\xbe\xf9\xe4\xcf\x4d\x5e\xfc\x9d\xd7\x20\xb6\xb9\xd2\x9c\xab\x6d\x63\xd0\x09\xc9\x59\xb4\xda\x3b\xb0\x11\x67\x11\xe8\xc2\x94\x4a\xd7\xd9\x5f\xd6\x68\x0a\x54\x5b\x47\x7f\xca\xd0\xaf\x06\x97\xad\x9d\x6b\xe8\xd9\xf8\xf3\x76\xaf\x8b\x88\xc7\x9c\xef\x72\xa4\x4a\x16\x70\x07\x28\xac\x43\xa5\x6b\x8a\xbb\x7d\x03\x02\xe1\xb9\x05\xeb\x28\xdc\x16\x4e\xbc\x72\xf6\x1e\x6b\x2b\x1e\x9f\xfa\x73\x6c\xae\x77\xe2\xb8\x3c\x8c\x69\xb6\x31\xda\xc2\x49\xde\xa7\x99\x50\xda\xfd\xfa\x0b\x9d\xa9\x5a\x5d\x78\x2a\x32\xa6\xad\x56\x4c\xee\x45\xb5\x75\xe9\xb2\x41\xa5\x5d\x25\x23\x82\x3a\xc9\xb2\x3b\x9b\x45\x89\x08\xc8\x62\xce\x19\x95\x4d\x04\x20\x52\x02\xf1\x7c\x30\xd6\xc9\x36\x19\x60\xbe\x72\xe6\xf1\x4d\x84\xb1\x29\x3d\x3c\xfe\x34\x79\x4a\x38\x23\x94\x13\x41\xc1\xb9\xde\x29\x34\x5a\xc6\x09\x67\x07\x2a\xa9\x2a\x5f\xef\xbb\x7b\xa1\xd5\x86\xc0\xb0\x26\xd7\xaa\x90\x80\x18\x73\x76\xe0\x9c\xd1\x7c\xba\x5a\xd0\xbc\xd2\xaf\xb9\x72\x1f\xd1\xb4\x0d\x67\x5d\x9d\xbe\x2f\x4b\xf9\x33\x15\xc9\x32\xb1\xce\x75\xb9\x21\xbe\xa5\xd2\x9c\xd5\x46\x10\xc7\x40\x8f\x95\x50\x01\xd5\x48\x67\x46\x83\x8c\x39\x63\x98\x88\x8e\x38\x28\x93\x3e\xa8\x86\x62\x9c\xfd\x2b\x89\xfd\x39\x32\x55\x26\x9d\x9a\x66\x2f\xbb\x84\x28\x2c\xa9\x05\x15\xb9\x82\x9d\xb1\x2e\x9d\x6e\x8c\x85\xaf\xca\xad\xe7\x88\x06\x7b\x22\x8c\x1d\xf8\x71\xd7\x63\x38\x84\xae\x1e\xf1\x02\x9e\xc7\x6e\x34\xfb\xf4\x33\x74\x8b\x30\x53\x19\x3d\x7c\x59\xfe\x11\x25\xe7\x02\xdd\xd9\xbb\x32\xf3\xa9\x51\x22\xbc\x00\xb6\x49\x3f\xcd\xe2\x44\xf8\x6e\x57\x90\x9d\x8e\xd5\xcf\x75\x20\xd8\x77\x9c\x41\x95\xb7\x1b\x37\xdd\x28\xd0\x2e\x9d\x19\x39\x00\xbb\xad\x5e\x4f\xe7\x4c\x09\xd3\x3a\xce\xc2\xff\x39\xbb\x8f\xe0\xe4\x55\x3a\xa6\x75\xe7\x7c\xe2\x5b\x6e\xc8\xb9\x70\x83\x5a\x41\x2a\xdf\x3b\x54\x4e\x3f\x98\x72\x1f\x87\x91\x0f\xcb\x13\x3d\x4e\xee\xc7\x15\x2e\x80\xe8\xb9\x00\xe2\x8d\x5c\x00\xf1\x1b\x73\xf1\xbd\x43\xe5\x53\x2e\xc3\xf2\x2d\x2e\x5d\xed\xdf\x1d\xff\x0c\x2f\xca\x4d\x4d\x09\x8b\xd3\xb7\xf9\x0d\x2e\x74\xbe\x30\x25\xfc\x0f\x36\xf4\xee\x0e\xed\xc8\x7e\xc6\x9c\x60\x1f\x74\xcd\x67\x40\xb5\x51\x9e\xa2\x0a\xec\xd2\xb0\x25\xbf\x1f\xb6\xe2\x77\xff\xd5\x8f\x1c\xe6\x45\xb9\xb1\x58\x3c\xba\xdd\xd1\xad\x7a\x8b\xf5\xa6\x35\x18\x57\x2c\xe4\x0f\x83\x67\xfa\x91\x18\xf4\x02\xac\x4c\xb9\xa7\xe9\x68\xe8\xa4\x77\xfa\xf4\x43\x5b\x55\x64\x86\x03\x91\xc9\x91\xc9\x5c\x07\x26\x2b\x0f\x3e\xac\x24\xc2\xf3\x25\x6c\x04\xd7\xa2\xa6\xa5\x6f\x16\xb0\x67\x99\x20\x80\x22\x17\xbf\x2f\xbf\x7c\x16\xa5\x29\xda\x2d\xd0\xc8\xf0\x42\xa7\xc1\x76\xa3\xbc\x69\x36\xaa\xc8\x9d\x32\xda\x7f\x77\xde\x89\x62\x9d\xa3\x05\x77\xdf\xba\xea\xc7\xdf\xa2\x44\xac\xc2\x3d\xb9\x94\xea\x0a\x86\xde\x28\x71\x50\x60\xbc\x50\x1e\xdc\x02\x0a\x50\x3b\x10\x6e\x0d\xbe\xaa\xc8\xad\x47\x1a\x54\x2e\xbd\x56\xe5\xf8\xe5\x79\x43\x69\xbc\x54\xb8\xcf\xbe\x71\x52\x7d\x70\xc8\x4a\x68\x9b\x1f\xf8\x3f\x01\x00\x00\xff\xff\x86\xb5\x46\xfc\xa4\x07\x00\x00")

func dataClientGoBytes() ([]byte, error) {
	return bindataRead(
		_dataClientGo,
		"data/client.go",
	)
}

func dataClientGo() (*asset, error) {
	bytes, err := dataClientGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/client.go", size: 1956, mode: os.FileMode(420), modTime: time.Unix(1504932606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/client.go": dataClientGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"client.go": &bintree{dataClientGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

