// Code generated by go-bindata.
// sources:
// data/client.go
// DO NOT EDIT!

package proxy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataClientGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x6b\x6f\xd3\x48\x17\xfe\x6c\xff\x8a\xf3\xfa\x55\x2b\x1b\xcc\xa4\xac\x00\x2d\x41\x59\xa9\x97\x50\xa1\x05\x54\x35\x5d\xb1\x52\x55\x21\xd7\x1e\x3b\xb3\x38\x33\xde\x99\x71\x43\xb6\xca\x7f\x5f\x9d\xb9\x38\x8e\xd3\x42\x40\xda\x7c\x48\x3c\xe3\x73\x7d\xce\x35\x4d\x96\x7f\xc9\x2a\x0a\x8b\x8c\xf1\x30\x64\x8b\x46\x48\x0d\x71\x18\x44\xb7\x2b\x4d\x55\x14\x06\x51\x2e\x57\x8d\x16\x23\x5d\xf7\x4f\x5f\x5f\x1e\xbd\xc6\x23\xe5\xb9\x28\x18\xaf\x46\xb7\x99\xa2\xaf\x5e\x6c\x5d\xfd\xa5\x04\xc7\x8b\x72\xa1\xf1\x87\x09\xfc\xae\x45\x85\x3f\x9c\xea\xd1\x5c\xeb\x06\x9f\x85\x11\xdc\x64\x7a\x3e\x2a\x59\x4d\xf1\x01\x2f\xd4\x8a\xe7\x51\x98\x84\x61\xd9\xf2\x1c\x0a\x7a\xdb\x56\x65\xdc\x64\x5a\x53\xc9\x41\x69\xc9\x78\x95\x42\x26\x2b\x05\x84\x10\xc6\x35\x95\x65\x96\xd3\xfb\x75\x02\xf7\x61\xc0\x4a\xcb\x01\x93\x09\x44\x5a\xb6\x34\xc2\xdb\xa0\x16\x15\xb9\x90\x8c\xeb\x32\x2e\x17\x9a\xcc\x1a\xfb\x1c\x5d\x1f\x28\xf8\xff\x41\x71\x03\x51\x0a\xde\x06\x72\x92\x29\x1a\x0b\x45\x8e\x65\xa5\xae\x8f\x6e\x92\x14\x84\x22\xe7\x54\x37\xac\x88\x93\xe4\xa9\x33\xc5\xda\x40\x08\x49\xc2\x60\x1d\xae\xc3\xf0\x2e\x93\x08\xa0\x55\xbf\xf9\x58\x8b\xc3\x40\x51\x79\x47\xe5\xee\x7d\x4e\xa5\xbe\x98\x7e\x48\xe1\x0b\x5d\x5d\x4c\x3f\xf8\x7b\xef\x3f\xc6\x27\x36\xae\x39\x24\xa2\x53\xc1\x39\xcd\x35\xe3\x15\x68\x01\x07\x2a\x4a\xc1\xca\x4e\x90\xa6\xa4\x12\x90\xd1\xf2\x74\x4c\x6f\x19\x67\x6a\x4e\x0b\x68\xa4\xc8\xa9\x52\x11\x5a\x1d\x27\x61\x18\x2c\x8b\x14\xa8\x94\x30\x9e\x38\x37\x97\x45\x9c\x18\x20\xf1\xf6\x7f\x13\xe0\xac\x36\xa2\x9a\x8c\xb3\x3c\xa6\x52\x1a\x87\x3b\xc3\xcf\x68\x2e\x0a\xba\x11\x62\x13\x82\xcc\x74\x31\x75\x09\x41\x2c\xc9\xcc\x38\x16\x3b\xb6\xbd\x54\x58\x48\x7e\x54\x83\xe5\xda\xcf\x87\x9a\x51\xae\x3b\xc9\x9c\x2e\x4f\xcd\x4d\x6c\x11\x4d\x61\xe8\xe4\x96\x45\x7b\xa9\xc0\xd7\x13\xb0\x8a\xc8\x3b\xce\x34\xcb\x6a\xf6\xcf\x26\xc1\x9e\x8f\x6f\x4c\x82\x4d\xf9\x1d\x93\x82\xc7\x49\x0a\xcb\xfd\x24\x63\xc2\x2d\x2b\xc0\x7a\x21\x9f\x32\xa6\xcf\xa5\x68\x9b\x30\x58\x56\xe4\xb8\x28\xe2\x5f\x30\xb8\x25\xeb\x07\x77\xa6\x0b\xc6\xc9\x4c\x67\x7a\xbf\x08\x8f\x46\x30\xcf\x78\x51\x53\x50\xc8\x19\x06\x95\xe8\xe7\x96\x4c\x61\x89\x92\x99\x20\x17\xac\xa1\x26\x9b\xba\x84\x33\xba\x60\x9e\x29\x38\x28\xc0\xf6\x14\x2c\x31\x32\x43\xdf\x93\x24\x0c\x50\x7f\x77\x86\xdf\xe0\xc8\xc8\xf4\xd6\x3f\x37\xc2\x06\x0a\x03\x97\xdf\xcb\x8a\x9c\x09\x8e\x0a\xed\x9d\xaf\x8b\x66\x85\x45\x51\x4a\xb1\x00\xa3\x3e\xb2\x04\x9f\x53\xc8\x45\xb3\x9a\x5a\x1c\x98\x20\x48\x19\x2f\xd3\x0e\x12\x4b\xc6\xca\x8e\xac\x87\x49\x4f\xc1\x54\x4a\x21\x0d\x4d\xa7\xc6\xe0\x32\x86\x83\xbb\xa8\xd3\x61\x85\x05\x4b\x72\x5a\x0b\x45\x3f\x31\x3d\x37\x7c\x0e\x56\xfc\x48\xaa\x5b\xc9\xcd\xf3\x3a\xec\xd1\x0e\xfc\x41\x17\xb7\xb5\xf5\x9c\x5a\x1b\xe2\x35\xd0\x5a\x51\x07\x5c\x4f\x08\x06\xcf\xc7\xb7\xcb\x3d\xc3\x1d\xcb\xe4\xcd\x30\xec\x5b\x71\x47\x93\x6c\x63\xd8\x8a\xbe\x68\xf5\x30\xfc\xde\xce\x73\xaa\x4d\x33\x1a\x59\x32\x63\x9f\x7d\x4c\x1d\xa7\x43\x7e\x63\x87\x68\x4d\x06\xa2\x89\x1b\x8a\x5d\x8b\xba\x77\x9d\x4f\x83\x7c\x18\x86\x5e\x0b\x98\x6d\x8c\x08\x7c\xa8\x6d\x9c\x7b\x06\x99\xb7\xf6\xb1\x0f\xfd\x56\x5e\xed\x74\xce\x61\x28\xbc\x1a\x13\x8a\x07\x20\xa3\x52\xee\x03\x19\x95\xd2\x43\x46\xa5\x4c\x1d\xe7\x0e\x64\x54\xca\x1e\x64\x8e\xe2\x41\xc8\xec\xbb\x7d\x21\xf3\xde\x78\x33\x06\xa0\xf5\x4c\xf2\xa0\x51\x29\x7f\x1e\x34\xaf\xa6\x07\x9a\xe7\xc1\x16\x66\x48\x85\xc4\x21\x48\xb3\x85\xc2\x80\x96\x46\x14\x32\x2d\x2b\xd3\xe6\x0c\x13\xfd\xca\xf4\xa9\x28\x68\xd7\xde\x1c\x52\x53\x77\xbf\x5f\x83\xc3\xb6\xfb\x95\xe9\xd8\x4b\x4b\x70\x8e\xeb\x55\x43\x9d\x38\xb4\xa3\xcd\x35\xf2\x3e\xc1\xad\x85\xd8\xe9\x10\x06\xed\x66\x7e\xb3\x02\x18\xd7\xaf\x5e\x20\xab\x99\xd8\xc3\x21\xd2\xed\x2c\xc3\x49\x7f\x7d\x83\x7d\x31\x81\xf8\x49\x6f\x0c\x09\x69\x02\x35\x1a\xc1\x7b\x91\x15\x20\x5a\x09\x57\xef\x67\xc8\x02\x4d\xc6\x24\x22\xd2\x2a\x6a\x40\xca\x5a\x3d\xa7\x5c\xb3\x3c\xd3\x4c\x70\x3b\x90\x3b\x3c\x74\xad\xc8\x9f\x2f\x8f\x5e\xff\x4e\x57\x17\x19\x93\xf1\x40\xf9\x83\xf0\xd8\xc6\x84\xc7\x14\x70\x4d\x32\x8d\xab\x8c\xa3\x3f\x78\x76\x5b\x53\x54\x5d\xa3\x4d\x28\xca\xf5\xbc\xe1\x24\x3d\x45\x2d\x42\xd4\x68\x01\xae\x8a\xe4\x23\x5d\xfa\x3b\x0c\xc9\x36\x15\x39\x6e\x1a\xca\x0b\x3c\xaa\xb7\x52\x2c\x2e\xa6\x1f\x36\xeb\x41\x18\xe8\x5a\x9d\x0a\x5e\xb2\x0a\xa5\x1d\xa2\x43\xf6\x88\xa6\x22\x0f\x2b\xd1\x75\xaa\xc6\x70\x7d\x63\xde\x6e\xee\xee\x51\xcc\x3a\x0d\x83\xe0\x52\x08\x7d\x7a\xac\xc6\x76\xe9\xda\xd6\x9f\x5a\xd3\x3b\x3d\xe4\xa4\x65\x75\xf1\x31\x5b\xd0\x2b\xd1\x13\x66\x12\xce\x61\x73\x68\x25\x18\x13\xcc\xd3\x18\x0e\x7b\x99\x61\x4a\xec\x4a\x66\x5c\xe1\x3e\xed\xdf\x75\x17\x76\xa0\x5c\xbd\x9f\x59\x6a\xab\x75\x0c\x9d\x01\xa9\x69\xed\xf8\x6d\xbe\xda\x31\x6c\x6d\xab\x28\x4c\x8d\x47\xa3\xfe\xce\x87\x3e\xa4\x18\xb2\x2e\xff\xe2\x1c\x5c\x42\x25\xd0\xdb\x37\x70\xd9\x80\xeb\x1b\x9f\x8c\x53\x7e\xd7\x3b\x9d\x31\x9f\xa6\x89\x4d\x42\xcc\x07\xdc\x2f\x24\xfd\xbb\xa5\x4a\xc3\xa4\x57\x0a\xc1\x96\xa8\x30\x08\x50\x56\xff\x8c\xd2\xba\xfa\x58\xdf\x23\xb9\x51\x68\xf4\x20\xe2\xb7\xa2\x58\xb9\x7d\x2b\x36\xbb\x01\x39\x69\xcb\xd2\x6c\xb0\x2e\x2b\xc7\x13\xc0\xbf\x11\x98\x3f\x66\xc9\xa3\x32\x46\xa6\x84\xd8\x53\xec\xec\xda\x1d\x66\x2e\x4e\xa6\xf9\xa2\x2a\xc4\xec\x92\xaa\x46\x70\xd5\x6b\x16\x2e\x5c\xe4\x42\x28\x1d\xe7\xa4\x7d\x1a\x8d\xa2\x14\xa2\xac\x69\x6a\x57\x4e\xe6\x5f\xcc\x1b\xc8\xe7\x99\x54\x54\x4f\x5a\x5d\x3e\xfb\x35\x4a\xc1\x18\xf1\x8d\xda\x71\x7a\xdd\xa2\xd2\x57\x4e\x4e\x44\xb1\xea\x1a\xa7\x47\xd7\xbe\xeb\x83\xfb\xee\xcc\xf5\x13\x14\xd3\xcd\x70\x0f\x86\xdd\x3c\x65\xbc\x23\x39\x71\x3b\x70\x7c\xe8\x85\x7e\x1f\x9b\x9c\xb0\x02\x26\x9d\x15\xe4\xdd\x59\xd8\xeb\x01\x0f\x26\x94\x5b\x22\x70\x8b\xba\xa4\x59\x41\x65\x2f\x5f\x7c\x23\x47\x50\xdd\x34\x1e\x1d\x14\x23\xb3\x23\xe1\x7e\x44\x18\xee\xb5\x9f\x1f\x89\xc2\x56\xa6\x1f\xa8\x6d\xce\xd6\xb1\x0f\x62\x24\x72\x4d\xf5\x33\x3b\x2c\xa2\x14\xe4\x3e\x91\xf9\xbe\x83\x66\x3b\x81\xd8\xb9\x68\x22\x26\xfb\xbd\x79\x67\x8a\x5b\x53\x71\x1f\xe8\xbc\x44\x4c\x77\x1d\x3d\xa7\x8f\xf9\xe9\x99\xbd\xa3\xdf\xed\xcf\x03\x77\x50\x9f\xc9\x83\xc7\x7b\x81\x5f\x22\x7e\xdc\x33\x1c\xda\x3f\xed\x99\x67\xfe\x0f\x3d\xdb\x0c\x7d\x88\xd9\xf6\x1c\x7d\xc8\x23\x9c\xf6\x58\x2a\x1b\x9f\xfc\xfc\xbf\xfc\x11\xdf\xb6\xc4\xec\xe3\xdd\x51\xba\x29\x3d\xac\x7e\xaf\x15\xeb\xfd\x1b\xa5\xde\x37\x6e\x50\xea\xdd\xde\xf2\x58\xa9\xf7\x55\xfa\x3a\xe8\x36\x27\x0b\xe7\xbf\x01\x00\x00\xff\xff\x9e\x53\xd8\xa3\x09\x12\x00\x00")

func dataClientGoBytes() ([]byte, error) {
	return bindataRead(
		_dataClientGo,
		"data/client.go",
	)
}

func dataClientGo() (*asset, error) {
	bytes, err := dataClientGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/client.go", size: 4617, mode: os.FileMode(420), modTime: time.Unix(1505895499, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/client.go": dataClientGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"client.go": &bintree{dataClientGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

